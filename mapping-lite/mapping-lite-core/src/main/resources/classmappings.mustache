/*
*  Copyright (c) 2020 Ot√°vio Santana and others
*   All rights reserved. This program and the accompanying materials
*   are made available under the terms of the Eclipse Public License v1.0
*   and Apache License v2.0 which accompanies this distribution.
*   The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
*   and the Apache License v2.0 is available at http://www.opensource.org/licenses/apache2.0.php.
*
*   You may elect to redistribute this code under either of these licenses.
*
*   Contributors:
*
*   Otavio Santana
*/
package org.eclipse.jnosql.lite.mapping.metadata;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.function.Function;
import java.util.stream.Collectors;

import javax.annotation.processing.Generated;

@Generated(value= "JNoSQL Lite ClassMappings Generator", date = "{{now}}")
public final class DefaultClassMappings implements ClassMappings {

    private final List<EntityMetadata> entities;

    public DefaultClassMappings() {
        this.entities = new ArrayList<>();
    {{#entities}}
        this.entities.add(new {{.}}());
    {{/entities}}
    }

    @Override
    public EntityMetadata get(Class<?> classEntity) {
        Objects.requireNonNull(classEntity, "classEntity is required");
        return entities.stream()
                .filter(e -> classEntity.equals(e.getClassInstance()))
                .findFirst()
                .orElseThrow(() -> new ClassInformationNotFoundException("classEntity not found"));
    }

    @Override
    public EntityMetadata findByName(String name) {
        Objects.requireNonNull(name, "name is required");
        return entities.stream()
                .filter(e -> name.equals(e.getName()))
                .findFirst()
                .orElseThrow(() -> new ClassInformationNotFoundException("classEntity not found"));
    }

    @Override
    public Optional<EntityMetadata> findBySimpleName(String name) {
        Objects.requireNonNull(name, "name is required");
        return entities.stream()
                .filter(e -> name.equals(e.getSimpleName()))
                .findFirst();
    }

    @Override
    public Optional<EntityMetadata> findByClassName(String name) {
        Objects.requireNonNull(name, "name is required");
        return entities.stream()
                .filter(e -> name.equals(e.getClassName()))
                .findFirst();
    }

   @Override
   public Optional<EntityMetadata> findByClass(Class<?> classEntity) {
       Objects.requireNonNull(classEntity, "classEntity is required");
       return entities.stream()
               .filter(e -> classEntity.equals(e.getClassInstance()))
               .findFirst();
   }

   @Override
   public Map<String, InheritanceMetadata> findByParentGroupByDiscriminatorValue(Class<?> parent) {
       Objects.requireNonNull(parent, "parent is required");
       return this.classes.values().stream()
                .flatMap(c -> c.getInheritance().stream())
                .filter(p -> p.isParent(parent))
                .collect(Collectors.toMap(i -> i.getDiscriminatorValue(), Function.identity()));
   }
}