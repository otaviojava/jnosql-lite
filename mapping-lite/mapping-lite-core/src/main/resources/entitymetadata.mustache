/*
*  Copyright (c) 2020 Ot√°vio Santana and others
*   All rights reserved. This program and the accompanying materials
*   are made available under the terms of the Eclipse Public License v1.0
*   and Apache License v2.0 which accompanies this distribution.
*   The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
*   and the Apache License v2.0 is available at http://www.opensource.org/licenses/apache2.0.php.
*
*   You may elect to redistribute this code under either of these licenses.
*
*   Contributors:
*
*   Otavio Santana
*/
package {{packageName}};

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.eclipse.jnosql.lite.mapping.metadata.EntityMetadata;
import org.eclipse.jnosql.lite.mapping.metadata.FieldMetadata;
import org.eclipse.jnosql.lite.mapping.metadata.InheritanceMetadata;

import static java.util.function.Function.identity;
import static java.util.stream.Collectors.collectingAndThen;
import static java.util.stream.Collectors.toList;
import static java.util.stream.Collectors.toMap;

import javax.annotation.processing.Generated;

@Generated(value= "JNoSQL Lite EntityMetadata Generator" , date = "{{now}}")
public final class {{className}} implements EntityMetadata {

private final List<FieldMetadata> fields;

private final InheritanceMetadata inheritance;

    public {{className}}() {
        this.fields = new ArrayList<>();
    {{#fields}}
        this.fields.add(new {{.}}());
    {{/fields}}
    {{#inheritanceParameter}}
        this.inheritance= new InheritanceMetadata({{{inheritanceParameter}}});
    {{/inheritanceParameter}}
    {{^inheritanceParameter}}
        this.inheritance= null;
    {{/inheritanceParameter}}
    }

    @Override
    public String getName() {
        return "{{name}}";
    }

    @Override
    public String getClassName() {
         return "{{entityQualified}}";
    }

    @Override
    public String getSimpleName() {
        return "{{entity}}";
    }


    @Override 
    public <T> T newInstance() {
    {{^inheritance}}
        return (T)new {{entity}}();
    {{/inheritance}}
   {{#inheritance}}
       throw new UnsupportedOperationException("You cannot create a constructor to the class {{entityQualified}}");
   {{/inheritance}}
    }

    @Override
    public Class<?> getClassInstance() {
        return {{entity}}.class;
    }

    @Override
    public List<FieldMetadata> getFields() {
        return Collections.unmodifiableList(fields);
    }

    @Override
    public List<String> getFieldsName() {
        return getFields().stream()
        .map(FieldMetadata::getFieldName)
        .collect(collectingAndThen(toList(), Collections::unmodifiableList));
}

    @Override
    public String getColumnField(String javaField) {
    Objects.requireNonNull(javaField, "javaField is required");
    return getFields().stream()
        .filter(f -> javaField.equals(f.getFieldName()))
        .map(FieldMetadata::getName)
        .findFirst().orElse(javaField);
    }

    @Override
    public Optional<FieldMetadata> getFieldMapping(String javaField) {
    Objects.requireNonNull(javaField, "javaField is required");
    return getFields().stream()
        .filter(f -> javaField.equals(f.getFieldName()))
        .findFirst();
    }

    @Override
    public Map<String, FieldMetadata> getFieldsGroupByName() {
    return getFields().stream()
    .collect(toMap(FieldMetadata::getName, identity()));
    }

    @Override
    public Optional<FieldMetadata> getId() {
    return getFields().stream()
    .filter(FieldMetadata::isId)
    .findFirst();
    }

    @Override
    public boolean isEmbedded() {
      return {{embedded}};
    }

    @Override
    public boolean hasEntityName() {
      return Objects.isNull(null);
    }

    @Override
    public boolean isInheritance() {
      return {{inheritance}};
    }

    @Override
    public Optional<InheritanceMetadata> getInheritance() {
      return Optional.ofNullable(inheritance);
    }

}