/*
*  Copyright (c) 2021 Ot√°vio Santana and others
*   All rights reserved. This program and the accompanying materials
*   are made available under the terms of the Eclipse Public License v1.0
*   and Apache License v2.0 which accompanies this distribution.
*   The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
*   and the Apache License v2.0 is available at http://www.opensource.org/licenses/apache2.0.php.
*
*   You may elect to redistribute this code under either of these licenses.
*
*   Contributors:
*
*   Otavio Santana
*/
package {{package}};

import jakarta.nosql.mapping.Repository;
import jakarta.nosql.mapping.keyvalue.KeyValueTemplate;

import javax.annotation.processing.Generated;
import javax.inject.Inject;
import java.util.Objects;
import java.util.Optional;

import static java.util.Objects.requireNonNull;

@Generated(value = "JNoSQL Lite KeyValue Repository Generator", date = "{{now}}")
@javax.enterprise.context.ApplicationScoped
public class {{className}} implements {{repository}} {

    private final KeyValueTemplate template;

    @Inject
    public {{className}}(KeyValueTemplate template) {
       this.template = template;
    }

    @Override
    public <S extends {{entityType}}> S save(S entity) {
        requireNonNull(entity, "entity is required");
        this.template.put(entity);
        return entity;
    }

    @Override
    public <S extends {{entityType}}> Iterable<S> save(Iterable<S> entities) {
        requireNonNull(entities, "entities is required");
        entities.forEach(this::save);
        return entities;
   }

    @Override
    public void deleteById({{keyType}} id) {
       requireNonNull(id, "id is required");
       this.template.delete(id);
    }

    @Override
    public void deleteById(Iterable<{{keyType}}> ids) {
       requireNonNull(ids, "ids is required");
       ids.forEach(this::deleteById);
    }

    @Override
    public Optional<{{entityType}}> findById({{keyType}} id) {
        requireNonNull(id, "id is required");
        return this.template.get(id, {{entityType}}.class);
    }

    @Override
    public Iterable<{{entityType}}> findById(Iterable<{{keyType}}> ids) {
       requireNonNull(ids, "ids is required");
       return this.template.get(ids, {{entityType}}.class);
    }

    @Override
    public boolean existsById({{keyType}} id) {
        requireNonNull(id, "id is required");
        return this.template.get(id, {{entityType}}.class).isPresent();
    }

    @Override
    public long count() {
        throw new UnsupportedOperationException("Key-Value does not support count method");
    }

    {{#methods}}
    @Override
    public {{{returnType}}} {{methodName}}({{{parametersSignature}}}) {
    {{#parameters}}
       requireNonNull({{name}}, "{{name}} is required");
    {{/parameters}}
    {{#sourceCode}}
       {{{.}}};
    {{/sourceCode}}
       return {{{returnValue}}};
    }
    {{/methods}}


}